// useEffect(() => {
  //   if(connectedDevice && isRecording) {

  //     // Will need to map through the list of connected devices (2 ESP's will be connected)

  //     // Send signal to the Microcontrollers to begin recording data      
  //     BleManager.connect(connectedDevice?.id).then(() => {
  //       console.log("Connected");

  //       // RetrieveServices is required before any writes or reads
  //       BleManager.retrieveServices(connectedDevice?.id).then((peripheralInfo) => {
  //         // Connected Device Data:
  //         /** {"advertising": {"isConnectable": 1, "kCBAdvDataRxPrimaryPHY": 1, "kCBAdvDataRxSecondaryPHY": 0, "kCBAdvDataTimestamp": 664734781.991659, "localName": "ESP32", 
  //          * "serviceUUIDs": ["6725B97A-B780-48E2-A199-27B94E9F6E1B", "6725B97A-B780-48E2-A199-27B94E9F6E1B"], "txPowerLevel": 3}, 
  //          * "characteristics": [{"characteristic" (Input UUID): "5D695378-B55B-4F49-B2DE-B1575A839B19", "isNotifying": false, "properties": [Array], "service": "6725B97A-B780-48E2-A199-27B94E9F6E1B"}, 
  //          * {"characteristic" (Output UUID): "DC51B616-6197-4E57-A102-F7C77E6A3B01", "isNotifying": false, "properties": [Array], "service": "6725B97A-B780-48E2-A199-27B94E9F6E1B"}], 
  //          * "id": "9DE325ED-9240-4A8C-EE09-161D226B6A6E", "name": "ESP32", "rssi": -57, "services": ["6725B97A-B780-48E2-A199-27B94E9F6E1B"]} */
          
  //         // Ping the microcontroller to begin sending data
  //         BleManager.write(
  //           connectedDevice.id,
  //           connectedDevice.services[0],
  //           connectedDevice.characteristics[0].characteristic,
  //           [base64.encode("")]
  //         ).then(() => {
  //           console.log("Signaled ESP to start sending data...");
  //         })
  //         .catch((error) => {
  //           console.log(error);
  //         });

  //         if(isRecording) {
  //           // setInterval to read the data every second
  //           countRef.current = setInterval(() => {
  //             // Reads Data from ESP32 (from the loop function)
  //             BleManager.read(
  //               connectedDevice.id,
  //               connectedDevice.services[0],
  //               connectedDevice.characteristics[1].characteristic,
  //             ).then((data) => {
  //               const msgFromESP: string = data.reduce((str: string, charIndex: number) => str += String.fromCharCode(charIndex), ' ');
  //               console.log("Read: " + msgFromESP.trim());
  //             })
  //             .catch((error) => {
  //               console.log(error);
  //             });
  //           }, 1000);
  //         } else {            
  //           // Stop Interval
  //           clearInterval(countRef.current);
  //         }      
  //       })
  //     })
  //     .catch((error) => {
  //       console.log(error);
  //     });

  //   } else if(isRecording) {
  //     // No devices connected so only the timer will run
  //     console.log("No devices Connected... only timer will start")
  //   } else if(!isRecording && timer !== 0) {
  //     setTimer(0);
  //     clearInterval(countRef.current);

  //     // If the user stops recording then send the data to the API
  //     activityMutation.mutate({totaltime: timer})
  //   }
  // },[isRecording])




  // ---------------------------------------------------------------------

  // React
import { useCallback, useEffect, useRef, useState } from "react";

// React-Query
import { useMutation, useQueryClient } from "react-query";
import { ACTIVITY } from "../../react-query/activity/queryKeys";
import { updateQueryID } from "../../react-query/reusable/hooksRQ";
import { postNewActivity } from "../../react-query/activity/mutations";

// React-Native
import base64 from "react-native-base64";
import { Platform } from "react-native";

// Components
import { ActivityProps, bleManager } from "./Activity";

// GeoLocation
import Geolocation from '@react-native-community/geolocation'
import { GeolocationResponse } from '@react-native-community/geolocation';

// Bluetooth
import { Device } from 'react-native-ble-plx';

const SERVICE_UUID = '6725B97A-B780-48E2-A199-27B94E9F6E1B';
const INPUT_UUID = '5D695378-B55B-4F49-B2DE-B1575A839B19';
const OUTPUT_UUID = 'DC51B616-6197-4E57-A102-F7C77E6A3B01';

export const useActivity = ({ route, navigation, connectedDevice, setConnectedDevice } : ActivityProps) => {  
  // Timer/Reading from Microcontroller
  const [timer, setTimer] = useState<number>(0);
  const [isRecording, setIsRecording] = useState<boolean>(false);
  const countRef = useRef(null);
  const postToDBRef = useRef(null);

  // Geolocation
  // const [initialPosition, setInitialPosition] = useState<GeolocationResponse>();
  // const [lastPosition, setLastPosition] = useState<GeolocationResponse>();
  const [positionData, setPositionData] =useState<GeolocationResponse[]>([]);
  const [watchID, setWatchID] = useState<number | null>(null);

  const queryClient = useQueryClient();

  const activityMutation = useMutation(postNewActivity,
    { onSuccess: (data) => {
      // Need to update the useQuery(ACTIVITY) with the new entry
      updateQueryID(queryClient, ACTIVITY, "ADD", data.data.activity);
    },
  });

  const handleBLEData = () => {
    // Save BLE Data and GPS data from phone
    // Save data to the Database every 30 seconds or when timer stops
    console.log(positionData);

    // Reset the array to be empty
    // setPositionData([]);
  }

  const startRecording = useCallback(async () => {
    if(isRecording) {
      // ---------------------- Begin Recording Location from Device ----------------------
      Geolocation.getCurrentPosition(
        position => {
          setPositionData(previous => [...previous, position]);
        },
        error => console.log(JSON.stringify(error)),
        {enableHighAccuracy: true, timeout: 20000, maximumAge: 1000, distanceFilter: 1}
      );
  
      setWatchID(Geolocation.watchPosition(position => {
          setPositionData(previous => [...previous, position]);
        },
        error => console.log(JSON.stringify(error)),
        {enableHighAccuracy: true, timeout: 20000, maximumAge: 1000, distanceFilter: 1}
      ))
      // -----------------------------------------------------------------------------------

      if(connectedDevice) {
        // ---------------------- Connect to Device with UUID and begin recording ----------------------
        connectedDevice
        .connect()
        .then((device: Device) => {
          return device.discoverAllServicesAndCharacteristics();
        })
        .then((device: Device) => {
          //  Set what to do when DC is detected
          bleManager.onDeviceDisconnected(connectedDevice.id, (error, device) => {
            console.log('Device DC');
            setConnectedDevice(null);
          });
  
          // Signal the Microcontroller to begin recording:
          device.writeCharacteristicWithResponseForService(
            SERVICE_UUID,
            INPUT_UUID,
            base64.encode("Record")
          ).then((characteristic) => {
            console.log(base64.decode(characteristic?.value ?? "FAIL"));
          })
  
          //Read inital values
          device
            .readCharacteristicForService(SERVICE_UUID, OUTPUT_UUID)
            .then(valenc => {
              console.log(base64.decode(valenc?.value ?? "FAIL"));
            });
  
          if(Platform.OS === "ios") {
            // On iOS monitorCharacteristicForService only shows the data once... therefore we will use read instead
            countRef.current = setInterval(() => {
              // Reads Data from ESP32 (from the loop function)
              device
              .readCharacteristicForService(SERVICE_UUID, OUTPUT_UUID)
              .then(valenc => {
                console.log(base64.decode(valenc?.value ?? "FAIL"));
              });
            }, 1000);
          } else {
            // Monitor values and tell what to do when receiving an update
            device.monitorCharacteristicForService(
              SERVICE_UUID,
              OUTPUT_UUID,
              (error, characteristic) => {
                if (characteristic?.value != null) {
                  console.log(
                    'Message update received: ',
                    base64.decode(characteristic?.value),
                  );
                }
              },
              "monitortransaction",
            );
          }
          console.log('Connection established');
        }).catch((error) => {
          console.log(error);
        });
        // ----------------------------------------------------------------------------------------
      }
      // Save Data to Database every 30 seconds
      postToDBRef.current = setInterval(() => {
        console.log(positionData.length);
        handleBLEData();
      }, 5000);
      
    } else if(!isRecording && timer !== 0) {
      // Stop Interval (Read from Microcontroller if iOS)
      clearInterval(countRef.current);
      clearInterval(postToDBRef.current);

      // Reset Timer to 0
      setTimer(0);

      // Clear Geolocation
      watchID !== null && Geolocation.clearWatch(watchID);

      // If the user stops recording then send the data to the API
      activityMutation.mutate({totaltime: timer})

      // Signal the microcontroller to stop recording data
      if(connectedDevice) {
        // Signal the Microcontroller to Stop Recording:
        connectedDevice.writeCharacteristicWithResponseForService(
          SERVICE_UUID,
          INPUT_UUID,
          base64.encode("Stop Recording")
        ).then((characteristic) => {
          console.log(base64.decode(characteristic?.value ?? "FAIL"));
        });

        // Cancel monitor transaction
        bleManager.cancelTransaction('monitortransaction');
      }

      // Save remaining data to the DB
      handleBLEData();
    }
  },[isRecording])

  useEffect(() => {
    startRecording();
  },[startRecording])

  return {
    isRecording, 
    timer,
    setTimer,
    navigation,
    connectedDevice,
    setIsRecording,
  }
}